<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title />
		<link>/</link>
		<description />
		<copyright>Copyright © 2024</copyright>
		<managingEditor>Patrick Magee</managingEditor>
		<pubDate>Sat, 16 Mar 2024 20:45:19 GMT</pubDate>
		<lastBuildDate>Sat, 16 Mar 2024 20:45:19 GMT</lastBuildDate>
		<item>
			<title>How to hi-jack CEF applications</title>
			<link>/posts/2023-01-02-how-to-hijack-production-cef-applications</link>
			<description>&lt;p&gt;It's important to ensure that you disable debugging functionality before releasing to production. Password protecting your CEF application exe can be bypassed by users who know which arguments they should pass to the exe, which can enable users to bypass the security you put in place.&lt;/p&gt;</description>
			<author>Patrick Magee</author>
			<guid isPermaLink="false">/posts/2023-01-02-how-to-hijack-production-cef-applications</guid>
			<pubDate>Mon, 02 Jan 2023 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;It's important to ensure that you disable debugging functionality before releasing to production. Password protecting your CEF application exe can be bypassed by users who know which arguments they should pass to the exe, which can enable users to bypass the security you put in place.&lt;/p&gt;
&lt;p&gt;Take the example below where the self contained isolated non Steam version of the Launcher for SWTOR does not protect against remote debugging, enabling the ability to extract full source code of the Launcher, reverse engineer the native interop to the C++ dll and also being able to automate the usage of the desktop application with a WebDriver.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-C#"&gt;
async Task Main()
{	
	// use 1Password CLI to extract item you need for logging in

    var opCLI = &amp;#64;&amp;quot;C:\Users\patri\OneDrive\tools\op.exe&amp;quot;;
    var args = &amp;quot;item get SWTOR --format json&amp;quot;;
    var driverExeDir = &amp;#64;&amp;quot;C:\Users\patri\Downloads\chromedriver_win32&amp;quot;;
    var cefClient = &amp;#64;&amp;quot;G:\Star Wars - The Old Republic\launcher.exe&amp;quot;;

	using (var op = Process.Start(new ProcessStartInfo { FileName = opCLI, RedirectStandardOutput = true, Arguments = args }))
	{
		using(var document = JsonDocument.Parse(await op.StandardOutput.ReadToEndAsync()))
		{
			var items = document.RootElement
                .GetProperty(&amp;quot;fields&amp;quot;)
                .EnumerateArray()
                .Where(x =&amp;gt; x.GetProperty(&amp;quot;id&amp;quot;).ValueEquals(&amp;quot;username&amp;quot;) || 
                            x.GetProperty(&amp;quot;id&amp;quot;).ValueEquals(&amp;quot;password&amp;quot;) || 
                            x.GetProperty(&amp;quot;type&amp;quot;).ValueEquals(&amp;quot;OTP&amp;quot;))
                .ToArray();

			var details = new
			{
				username = items[0].GetProperty(&amp;quot;value&amp;quot;).GetString(),
				password = items[1].GetProperty(&amp;quot;value&amp;quot;).GetString(),
				otp = items[2].GetProperty(&amp;quot;totp&amp;quot;).GetString(),
			};

			// Chrome/75.0.3770.100
			// Download the Driver for the CEF client exe and configure additional arguments			
			var options = new ChromeOptions() { LeaveBrowserRunning = true, BinaryLocation = cefClient };
			options.AddArgument(&amp;quot;--debug&amp;quot;);
			options.AddArgument(&amp;quot;--remote-debugging-port=9222&amp;quot;);
			
			using (IWebDriver driver = new ChromeDriver(driverExeDir, options))
			{
				// Use Chrome/Edge and inspect to find the right elements you need to automate and then apply this to your code				
				driver.FindElement(By.XPath(&amp;quot;//*[&amp;#64;id=\&amp;quot;usernameInput\&amp;quot;]&amp;quot;)).Clear();				
				driver.FindElement(By.XPath(&amp;quot;//*[&amp;#64;id=\&amp;quot;usernameInput\&amp;quot;]&amp;quot;)).SendKeys(details.username);
				
				driver.FindElement(By.XPath(&amp;quot;//*[&amp;#64;id=\&amp;quot;passwordInput\&amp;quot;]&amp;quot;)).SendKeys(details.password);
				driver.FindElement(By.XPath(&amp;quot;//*[&amp;#64;name=\&amp;quot;securitykey\&amp;quot;]&amp;quot;)).SendKeys(details.otp);
				
				driver.FindElement(By.Id(&amp;quot;nextButton&amp;quot;)).Click();	
				
				await Task.Delay(1000);				
				driver.FindElement(By.Id(&amp;quot;closeAlertsBtn&amp;quot;)).Click();				
				await Task.Delay(2000);				
				driver.FindElement(By.ClassName(&amp;quot;hitbox&amp;quot;)).Click();
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>SWTOR and Login Automation</title>
			<link>/posts/2022-12-22-swtor-login-automation</link>
			<description>&lt;p&gt;Power Automate should be installed already if you are on Windows 11. I created a brand new flow and named it 'SWTOR Launch'.&lt;/p&gt;</description>
			<author>Patrick Magee</author>
			<guid isPermaLink="false">/posts/2022-12-22-swtor-login-automation</guid>
			<pubDate>Thu, 22 Dec 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Power Automate should be installed already if you are on Windows 11. I created a brand new flow and named it 'SWTOR Launch'.&lt;/p&gt;
&lt;p&gt;You will need to install the 1Password CLI too and ensure it's added to your &lt;code&gt;PATH&lt;/code&gt; like any other tool.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/i397HPZ.png" alt="1Password CLI setting"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/xrPllgz.png" alt="Power Automate"&gt;&lt;/p&gt;
&lt;p&gt;There are almost endless possibilies to automate tasks from Power automate ranging from remote to local. Lets take a look at how I have automated the login process for SWTOR.&lt;/p&gt;
&lt;p&gt;The next screenshot shows all the individual actions I have inserted as part of my new flow. Each step is using a specific feature which you can click and drag onto the flow which you can then further customise each step to read from custom variables etc.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/J7Kb9QM.png" alt="Flow Steps"&gt;&lt;/p&gt;
&lt;p&gt;The first step is to ensure the Launcher is actually running, so that we can insert the credentials into the launcher. The next step is to create a custom script step and use the 1Password CLI tool (added to my PATH) and to use the special one password item API to extract the credentials from my Password manager (This step actually activates Windows Hello, where I can tap my Ubikey to authenticate and allow 1Password to continue).&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/KPaEgUJ.png" alt="1Password"&gt;&lt;/p&gt;
&lt;p&gt;This command is essentually going to extract the following which is stored in my 1Password like so.....&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/8XnU7FT.png" alt="1Password output"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/3RJeY9k.png" alt="1Password item"&gt;&lt;/p&gt;
&lt;p&gt;We want 1Password to output this in a format which we can then consume easily in Power Automate, which is &lt;code&gt;JSON&lt;/code&gt; so we use the &lt;code&gt;--format json&lt;/code&gt;. This is then inserted into a `%PowershellOutput% variable. Variables can be freely renamed, I just left the default name.&lt;/p&gt;
&lt;p&gt;Once we have this, we want to then navigate and extract some of the variables for debugging and ease of use in the following step, which is to convert JSON to a &lt;code&gt;custom object&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/DrC76ud.png" alt="Convert to custom object"&gt;&lt;/p&gt;
&lt;p&gt;Once the step runs, you'll notice that the variables are visible as they become populated on the right hand side of the flow window.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/5jgP9uN.png" alt="Variables"&gt;&lt;/p&gt;
&lt;p&gt;I then fill in the following additional variables based on the fields that will need to entered within the Launcher. Using the &lt;code&gt;custom object&lt;/code&gt; accessors I populate the variables so that they can be used in the UI automation steps.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/Y8wIngk.png" alt="Secrets"&gt;&lt;/p&gt;
&lt;p&gt;Next is to ensure that the UI Elements are configured in Power Automate. You can add UI elements by selecting Windows and configuring how it should scan a UI for fields.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/vn8wqww.png" alt="UI Element 1"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/UcSyi7L.png" alt="UI Element 2"&gt;&lt;/p&gt;
&lt;p&gt;You will need to this process for each individual element that needs to have text entered or clicked on.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/sHVogED.png" alt="UI Element 3"&gt;&lt;/p&gt;
&lt;p&gt;Once the UI elements are in, we can then add steps to &lt;code&gt;reference&lt;/code&gt; these UI elements and populate them.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/Bth1UFc.png" alt="UI Element 4"&gt;&lt;/p&gt;
&lt;p&gt;Here's a 30s demo of Power Automate running the flow&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/swtor/automate.gif" alt="UI Element 5"&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>1Password and SSH</title>
			<link>/posts/2022-04-18-1password-and-ssh</link>
			<description>&lt;p&gt;I've been using a Password manager for years now, however one thing which always annnoyed me was the lack of SSH support and having your Private key stored in the .ssh folder on your machine. Or you would have to manually generate your SSH key using Putty. Then you would upload your public key and make sure you never lost your private key since it was always stored in the .ssh folder unless you backed it up securely and then would put it back on a fresh install.&lt;/p&gt;</description>
			<author>Patrick Magee</author>
			<guid isPermaLink="false">/posts/2022-04-18-1password-and-ssh</guid>
			<pubDate>Mon, 18 Apr 2022 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I've been using a Password manager for years now, however one thing which always annnoyed me was the lack of SSH support and having your Private key stored in the .ssh folder on your machine. Or you would have to manually generate your SSH key using Putty. Then you would upload your public key and make sure you never lost your private key since it was always stored in the .ssh folder unless you backed it up securely and then would put it back on a fresh install.&lt;/p&gt;
&lt;p&gt;1Password has a feature which allows it to act as an SSH Agent meaning you no longer need to store your secrets on disk in the .ssh folder but can instead store your SSH data in 1Password.&lt;/p&gt;
&lt;p&gt;1Password allows you to store all sorts of sensitive information. You can see in the screenshot below that SSH is an option.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/1password-ssh/1.png" alt="Create Password"&gt;&lt;/p&gt;
&lt;p&gt;Once you select the SSH Option, you can optionally name the SSH Key and even paste in or upload an existing private ssh key.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/1password-ssh/2.png" alt="Create or Paste"&gt;&lt;/p&gt;
&lt;p&gt;You will need to make sure any existing SSH Agent Service is not running.
This will allow 1Password to take control over the SSH Named Pipe on Windows.
This should be supported by most Git Versioning tools such as Git for Windows.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/1password-ssh/4.png" alt="Enable the 1Password SSH Agent"&gt;&lt;/p&gt;
&lt;p&gt;Using Windows Hello Feature, you can see it asks for my PIN. There are other approaches such as using your USB YubiKey to also Authenticate and unlock the 1Password Wallet.
Once I'm validated my SSH session will continue and I will be able to use git push or pull commands using the private SSH Key which is linked to the public SSH key that I uploaded to Github.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/1password-ssh/3.png" alt="Demo Popup"&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Heroes of the Storm and D3.js</title>
			<link>/posts/2021-08-07-heroes-of-the-storm-d3js</link>
			<description>&lt;p&gt;One of my favourite games is a hero brawler game called Heroes of the Storm. It's a 5 people versus 5 people game.&lt;br&gt;
There are 3 lanes on the map and the goal is to kill their core before they kill your core.&lt;/p&gt;</description>
			<author>Patrick Magee</author>
			<guid isPermaLink="false">/posts/2021-08-07-heroes-of-the-storm-d3js</guid>
			<pubDate>Thu, 08 Jul 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;One of my favourite games is a hero brawler game called Heroes of the Storm. It's a 5 people versus 5 people game.&lt;br /&gt;
There are 3 lanes on the map and the goal is to kill their core before they kill your core.&lt;/p&gt;
&lt;p&gt;The general layout of a map is usually split into 3 lanes. Every 30 seconds you have some minions that travel down the lanes and meet half way and the idea throughout the session is to what ever it costs to win. That could be team fights, gaining xp from minions, destroying enemy buildings, ganking enemies etc. There are many ways to win just as there are many ways to lose.
Heroes are unique units that players can control in the game that bring a unique style to how that team might win or lose. There are over 90 heroes to select from which can become extremely complicated for new players to learn and understand how to counter those heroes of they come up against them.&lt;/p&gt;
&lt;p&gt;Heroes are split into several main categories: Tank, Bruiser, Ranged Assassin, Melee Assassin, Healer &amp;amp; Support. This is only a very high level view of the complexity of this game.&lt;/p&gt;
&lt;p&gt;When you break it down to how a hero's style and unique capabilties can bring something positive to a team, it will also depend on how well the hero performs on a certain map, and if their hero counters enemy heroes or if they also work well with other heroes in their team.&lt;/p&gt;
&lt;p&gt;There is a project on Github called HeroesToolChest by a guy named Kevin who has a tool that exports string data from the Game itself. Using this data, I was able to transform the information that is not always available even in the UI of the game and produce a hierarchical edge graph that can show relationships between different elements of the game.&lt;/p&gt;
&lt;p&gt;Once I was able to extract all the required information to produce the graph, I went online and forked an example of d3.js that I could use as the foundation for displaying the data I wanted to show.&lt;/p&gt;
&lt;p&gt;Selecting one of the edge nodes, such as Complexity, will allow you see all heroes that have been labeled with the same complexity.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/292720/128598800-751da65d-2418-418a-afdc-ff345feb1d56.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;You can also do the reverse by selecting an individual Hero and see all the other things that Hero relates to.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/292720/128598831-88461845-27bb-4e76-b26b-f7501fcdf8dc.png" alt="image" /&gt;&lt;/p&gt;
&lt;script src="https://gist.github.com/pjmagee/a3d58c994f38ca6e4d7bdde7312e29fa.js"&gt;&lt;/script&gt;
&lt;p&gt;&lt;a href="https://observablehq.com/&amp;#64;pjmagee/heroes-of-the-storm-hero-relationships"&gt;Checkout the full relationship graph on Observable HQ&lt;/a&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Blazor &amp; SVG files - Part 2</title>
			<link>/posts/2020-02-17-blazor-and-svg-files-part-2</link>
			<description>&lt;p&gt;It's been a while since my last blog post about Blazor.  My original blog post was showing how to use Blazer client side only with SVG files, by requesting those images using a http client from the browser and getting the content from the wwwroot.&lt;/p&gt;</description>
			<author>Patrick Magee</author>
			<guid isPermaLink="false">/posts/2020-02-17-blazor-and-svg-files-part-2</guid>
			<pubDate>Mon, 17 Feb 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;It's been a while since my last blog post about Blazor.  My original blog post was showing how to use Blazer client side only with SVG files, by requesting those images using a http client from the browser and getting the content from the wwwroot.&lt;/p&gt;
&lt;p&gt;But what if you are using &lt;code&gt;services.AddServerSideBlazor();&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;My solution was to make use of &lt;code&gt;IWebHostEnvironment&lt;/code&gt;, and inject this into the registered &lt;code&gt;SvgService&lt;/code&gt;. Doing this, you get access to the &lt;code&gt;WebRootFileProvider&lt;/code&gt;, from there you can query other sub folders within the &lt;code&gt;wwwroot&lt;/code&gt;.&lt;/p&gt;
&lt;script src="https://gist.github.com/pjmagee/98b0995581ebbb7ea9d64a21863e0d43.js"&gt;&lt;/script&gt;
&lt;p&gt;Now with the &lt;code&gt;SvgService&lt;/code&gt; defined, which is a collection of svg's for different technology stacks, you can pass this into any &lt;code&gt;Component&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;@inject&lt;/code&gt;, &lt;code&gt;[Inject]&lt;/code&gt; or &lt;code&gt;@inherits OwningComponentBase&lt;/code&gt; you can get an instance of the &lt;code&gt;SvgService&lt;/code&gt;, and use it to render the svg.&lt;/p&gt;
&lt;h3 id="example-markup"&gt;Example markup&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;td class="@item.Kind.GetIconClass() text-center"&amp;gt;@SvgService.GetSvg(item.Kind)&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="example-component-code"&gt;Example component code&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;@code
{
    [Inject]
    SvgService SvgService { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;GetSvg&lt;/code&gt; function has an enum parameter, using the new &lt;code&gt;C# 9 switch syntax&lt;/code&gt; it accesses the raw SVG contents stored in the Dictionary as &lt;code&gt;MarkupString&lt;/code&gt;, which Blazor knows how to render properly on the page.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;public MarkupString GetSvg(EcosystemKind kind) =&amp;gt; kind switch
{
    EcosystemKind.Docker =&amp;gt; svgs["docker"],
    EcosystemKind.Gradle =&amp;gt; svgs["gradle"],
    EcosystemKind.Maven =&amp;gt; svgs["java"],
    EcosystemKind.Npm =&amp;gt; svgs["npm"],
    EcosystemKind.NuGet =&amp;gt; svgs["nuget"],
    EcosystemKind.PyPi =&amp;gt; svgs["python"],
    EcosystemKind.RubyGem =&amp;gt; svgs["ruby"],
    _ =&amp;gt; Empty
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For something this simple with no user/request specific data, this can be registered as a &lt;code&gt;Singleton&lt;/code&gt; instance and shared to all components.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;    private static IServiceCollection RegisterRazorComponentServices(this IServiceCollection services) =&amp;gt; services
            .AddSingleton&amp;lt;SvgService&amp;gt;() // Share this same SVG service across ALL components
            .AddScoped&amp;lt;NavigationService&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="improving-on-this-solution"&gt;Improving on this solution&lt;/h2&gt;
&lt;p&gt;The next step would be figure out if you can make the SVG Service, an easy to use sharable Blazor component itself, something such as &lt;code&gt;&amp;lt;CustomSvg Kind="enum" /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="mlo3eJH"&gt;&lt;a href="//imgur.com/mlo3eJH"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;&lt;script async="" src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="lyZoaYN"&gt;&lt;a href="//imgur.com/lyZoaYN"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;&lt;script async="" src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;blockquote class="imgur-embed-pub" lang="en" data-id="9dhvv0e"&gt;&lt;a href="//imgur.com/9dhvv0e"&gt;View post on imgur.com&lt;/a&gt;&lt;/blockquote&gt;&lt;script async="" src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Blazor &amp; SVG files - Part 1</title>
			<link>/posts/2019-03-19-blazor-and-svg-files-part-1</link>
			<description>&lt;p&gt;I've been experimenting with Blazor and using Bootstrap with SVG's. For Angular I remember that the Material design library had a really nice way of being able to pull in SVG files but this doesn't quite yet exist for blazor.&lt;/p&gt;</description>
			<author>Patrick Magee</author>
			<guid isPermaLink="false">/posts/2019-03-19-blazor-and-svg-files-part-1</guid>
			<pubDate>Tue, 19 Mar 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I've been experimenting with Blazor and using Bootstrap with SVG's. For Angular I remember that the Material design library had a really nice way of being able to pull in SVG files but this doesn't quite yet exist for blazor.&lt;/p&gt;
&lt;p&gt;I was really keen on using some SVG's from &lt;a href="https://simpleicons.org/"&gt;Simple Icons&lt;/a&gt; which contains loads of SVG's based on popular brands.&lt;/p&gt;
&lt;p&gt;Well, you're probably thinking, what do you mean &amp;quot;nice way of pulling in SVG files&amp;quot;. You just use the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag and in the &lt;code&gt;src&lt;/code&gt; attribute just throw in the path to the svg file that is served from the server. Well, it's not the easy if you wan't to manipulate or style your SVG, since you cant do that by using the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag approach. There are other solutions that use &lt;code&gt;jQuery&lt;/code&gt; to load that file and then replace the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag with the actual raw &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; but it was just so many lines of code and also it didnt seem like a good solution for my problem because I don't really want to use &lt;code&gt;jquery&lt;/code&gt; unless i reeaaallly need to, since i want to write the least amount of js as possible.&lt;/p&gt;
&lt;p&gt;Here is a quick way of directly loading raw SVG files through a Helper which you can &lt;code&gt;&amp;#64;inject&lt;/code&gt; into your blazor pages. This way, you only need to call the files once, load them in as &lt;code&gt;MarkupString&lt;/code&gt; and they will be output as Raw html.&lt;/p&gt;
&lt;script src="https://gist.github.com/pjmagee/b4bc15a8325065f48412a230df453b01.js"&gt;&lt;/script&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Blazor &amp; Pagination</title>
			<link>/posts/2019-03-19-blazor-and-pagination</link>
			<description>&lt;p&gt;The snippets below can be used to create a pagination razor component for a Bootstrap table with a pager.&lt;/p&gt;</description>
			<author>Patrick Magee</author>
			<guid isPermaLink="false">/posts/2019-03-19-blazor-and-pagination</guid>
			<pubDate>Mon, 18 Mar 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;The snippets below can be used to create a pagination razor component for a Bootstrap table with a pager.&lt;/p&gt;
&lt;p&gt;When the pager component recieves a click event, it sends that event back to the parent page component, and calls the &lt;code&gt;PageAsync&lt;/code&gt; function to get the requested page from the server.&lt;/p&gt;
&lt;p&gt;We then call the &lt;code&gt;StateHasChanged()&lt;/code&gt; function to ensure the component is rerendered and sent back to the client.&lt;/p&gt;
&lt;p&gt;The last snippet shows the page component and the pager component is placed under the actual table where you would render the columns and rows for the Items.&lt;/p&gt;
&lt;p&gt;The bootstrap markup is being rendered by using &lt;a href="https://github.com/chanan/BlazorStrap"&gt;BlazorStrap&lt;/a&gt;, a NuGet package which provides razor components that generate bootstrap 4 markup.&lt;/p&gt;
&lt;script src="https://gist.github.com/pjmagee/69b10e448baa276486aa1641bd395be8.js"&gt;&lt;/script&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>